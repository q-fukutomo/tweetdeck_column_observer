/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/content/content.js":
/*!********************************!*\
  !*** ./src/content/content.js ***!
  \********************************/
/***/ (() => {

eval("// #########################\n// config start\nconst defaultConfig = {\n    \"event\": \"pan_dev_test\",\n    \"nowplaying\": \"pan_dev_test_なうぷれ\",\n    \"fontColor\": \"FFFFFF\",\n    \"backgroundColor\": \"00FF00\",\n};\nlet config;\n\n// config end\n// #########################\n\n// ページを開いた際の初期化処理\nchrome.storage.local.set({'executeOperation':'init'},function(){});\nconfig = loadConfig();\n\nconst observer = createObserver();\nlet observeTarget;\n\nchrome.runtime.onMessage.addListener(\n    function(request,sender,sendResponse){\n        createExtentionView();\n\n        if(request.msg === 'init'){\n            observeTarget = initObserveTarget();\n            if(observeTarget){\n                observer.observe(observeTarget, {childList: true});\n                sendResponse({status: 0, msg: 'OK'}); \n            }else{\n                sendResponse({status: 1, msg: 'target-column not found'}); \n            }\n        }else if(request.msg === 'start'){\n            enableExtentionView();\n            observer.observe(observeTarget, {childList: true});\n            sendResponse({status: 0, msg: 'OK'});\n        }else if(request.msg === 'stop'){\n            disableExtentionView();\n            observer.disconnect();\n            sendResponse({status: 0, msg: 'OK'});\n        }\n\n        return true;\n    }\n);\n\nfunction loadConfig(){\n    let _config = defaultConfig;\n    chrome.storage.local.get(['eventTag','nowplayingTag','fontColor','backgroundColor'],(result) => {\n        if(result.eventTag)\n            _config.event = result.eventTag;\n        if(result.nowplayingTag)\n            _config.nowplaying = result.nowplayingTag;\n        if(result.fontColor)\n            _config.fontColor = result.fontColor;\n        if(result.backgroundColor)\n            _config.backgroundColor = result.backgroundColor;\n    });\n    return _config;\n}\nfunction getExtentionView(){\n    return document.querySelector('#extentionView');\n}\nfunction createExtentionView(){\n    const _extentionView = getExtentionView();\n    if(_extentionView !== null){\n        console.log('extentionView already exists');\n        return _extentionView;\n    }\n\n    const extentionView = document.createElement('div');\n    extentionView.id = 'extentionView';\n\n    const extentionViewInner = document.createElement('div');\n    extentionViewInner.id = 'extentionViewInner';\n    extentionView.appendChild(extentionViewInner);\n\n    const authorIcon = document.createElement('img');\n    authorIcon.id = 'authorIcon';\n    authorIcon.setAttribute('src', chrome.extension.getURL('img/egg.png'));\n    extentionViewInner.appendChild(authorIcon);\n\n    const author = document.createElement('p');\n    author.id = 'author';\n    author.innerText = '投稿者';\n    extentionViewInner.appendChild(author);\n\n    const tweetTextBox = document.createElement('p');\n    tweetTextBox.id = 'tweetTextBox';\n    tweetTextBox.innerText = 'ツイート本文';\n    tweetTextBox.style.color = '#' + config.fontColor;\n    tweetTextBox.style.backgroundColor = '#' + config.backgroundColor;\n    extentionViewInner.appendChild(tweetTextBox);\n\n    // extentionViewInner.appendChild(document.createElement('hr'));\n    \n    const closeButtonWrapper = document.createElement('div');\n    closeButtonWrapper.id = 'closeButtonWrapper';\n    extentionViewInner.appendChild(closeButtonWrapper);\n\n    const closeButton = document.createElement('button');\n    closeButton.id = 'closeButton';\n    closeButton.innerText = '閉じる';\n    closeButton.addEventListener('click', ()=>{\n        disableExtentionView();\n        observer.disconnect();\n        chrome.runtime.sendMessage({'msg': 'close'}, (res)=>{console.log(res)});\n    });\n    closeButtonWrapper.appendChild(closeButton);\n\n    document.body.appendChild(extentionView);\n\n    console.log('created extentionView');\n    return extentionView;\n}\nfunction enableExtentionView(){\n    const extentionView = document.querySelector('#extentionView');\n    if(extentionView){\n        extentionView.setAttribute('style', 'display: block;');\n        return 0;\n    }\n    return 1;\n}\nfunction disableExtentionView(){\n    const extentionView = document.querySelector('#extentionView');\n    if(extentionView){\n        extentionView.setAttribute('style', 'display: none;');\n        return 0;\n    }\n    return 1;\n}\n\nfunction createObserver(){\n    const observer = new MutationObserver(mutations => {\n        mutations.forEach(mutate => {\n            Array.from(mutate.addedNodes).forEach(\n                newArticle => updateExtentionView(newArticle)\n            )\n        });\n    });\n    return observer;\n}\nfunction initObserveTarget(){\n    const _searchBox = document.querySelector(`input[value=\\\\#${config.nowplaying}]`);\n    if(_searchBox === null) return null;\n\n    const searchBox = _searchBox;\n    const column = searchBox.closest('div.column-panel');\n\n    const observeTarget = column.querySelector('div.js-column-content div.js-column-scroller div.js-chirp-container');\n    return observeTarget;\n}\n\nfunction updateExtentionView(article){\n    const extentionView = getExtentionView();\n    if(extentionView === null) return 1;\n\n    const tweetData = getTweetData(article);\n    const authorIcon = document.getElementById('authorIcon');\n    const author = document.getElementById('author');\n    const tweetTextBox = document.getElementById('tweetTextBox');\n\n    authorIcon.setAttribute('src', tweetData.authorIconSrc);\n    author.innerText = tweetData.author;\n    tweetTextBox.innerText = removeHashtag(tweetData.tweetText);\n\n    return 0;\n}\nfunction getTweetData(article){\n    const tweetData = {\n        authorIconSrc: article.querySelector('img.tweet-avatar').getAttribute('src'),\n        author: article.querySelector('span.username').innerText,\n        tweetText: article.querySelector('p.tweet-text').innerText\n    };\n    return tweetData;\n}\n\n// TODO: 正規表現、変数展開時のエスケープ処理とか丁寧に\nfunction removeHashtag(tweetText){\n    let viewText = '';\n    const preg = new RegExp(`#(${config.event}|${config.nowplaying})(\\\\s|$)`, 'g');\n\n    tweetText.split('\\n').forEach(line => {\n        if(!line.match(preg)){\n            viewText += line+'\\n';\n        }else{\n            line = line.replace(preg, '');\n            if(line.match(/\\S/)) viewText += line+'\\n';\n        }\n    });\n    return viewText;\n}\n\n//# sourceURL=webpack://tweetdeck_colmuns_observer/./src/content/content.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/content/content.js"]();
/******/ 	
/******/ })()
;